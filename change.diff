diff --git a/gameshow/web/reactweb/src/components/features/GameShow/components/VideoPlayer.tsx b/gameshow/web/reactweb/src/components/features/GameShow/components/VideoPlayer.tsx
index ac1db41..01a6034 100644
--- a/gameshow/web/reactweb/src/components/features/GameShow/components/VideoPlayer.tsx
+++ b/gameshow/web/reactweb/src/components/features/GameShow/components/VideoPlayer.tsx
@@ -21,6 +21,11 @@ interface InteractiveCaptionData {
   };
 }
 
+// Helper function to detect mobile devices
+const isMobileDevice = () => {
+  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
+};
+
 export const VideoPlayer: React.FC<VideoPlayerProps> = ({
   src,
   plainCaptionsSrc,
@@ -31,6 +36,43 @@ export const VideoPlayer: React.FC<VideoPlayerProps> = ({
   const plainTrackRef = useRef<HTMLTrackElement>(null);
   const interactiveTrackRef = useRef<HTMLTrackElement>(null);
   const { dispatch, state } = useGameContext();
+  const isMobile = isMobileDevice();
+
+  // Initialize video element
+  useEffect(() => {
+    const video = videoRef.current;
+    if (!video) return;
+
+    // Set initial attributes for mobile compatibility
+    video.playsInline = true;
+    video.preload = 'auto';
+    video.crossOrigin = 'anonymous';
+
+    // Mobile-specific attributes
+    if (isMobile) {
+      video.setAttribute('webkit-playsinline', '');
+      video.setAttribute('playsinline', '');
+      video.setAttribute('x5-playsinline', '');
+      video.setAttribute('x5-video-player-type', 'h5');
+      video.setAttribute('x5-video-player-fullscreen', 'true');
+    }
+
+    // Force load the video
+    video.load();
+
+    // For mobile, we need to handle loading state
+    if (isMobile && video.readyState < 3) { // HAVE_FUTURE_DATA
+      const handleCanPlay = () => {
+        video.removeEventListener('canplay', handleCanPlay);
+      };
+      video.addEventListener('canplay', handleCanPlay);
+
+      // Cleanup
+      return () => {
+        video.removeEventListener('canplay', handleCanPlay);
+      };
+    }
+  }, [src, isMobile]);
 
   // Handle video playback when game starts
   useEffect(() => {
@@ -228,15 +270,14 @@ export const VideoPlayer: React.FC<VideoPlayerProps> = ({
         ref={videoRef}
         className="video-player"
         playsInline
-        autoPlay
-        muted
+        preload="auto"
         crossOrigin="anonymous"
       >
         <source src={src} type="video/mp4" />
         <track
           ref={plainTrackRef}
           label="Plain Captions"
-          kind="subtitles"
+          kind="captions"
           srcLang="en"
           src={plainCaptionsSrc}
           default
@@ -244,7 +285,7 @@ export const VideoPlayer: React.FC<VideoPlayerProps> = ({
         <track
           ref={interactiveTrackRef}
           label="Interactive Captions"
-          kind="subtitles"
+          kind="captions"
           srcLang="en"
           src={interactiveCaptionsSrc}
         />
diff --git a/gameshow/web/reactweb/src/components/features/GameShow/styles.css b/gameshow/web/reactweb/src/components/features/GameShow/styles.css
index 58e3cec..a44cb53 100644
--- a/gameshow/web/reactweb/src/components/features/GameShow/styles.css
+++ b/gameshow/web/reactweb/src/components/features/GameShow/styles.css
@@ -563,6 +563,23 @@
     right: 0;
     border-radius: 8px 8px 0 0;
   }
+
+  .video-container {
+    width: 100%;
+    height: 100%;
+    position: fixed;
+    top: 0;
+    left: 0;
+    right: 0;
+    bottom: 0;
+  }
+
+  .video-player {
+    width: 100%;
+    height: 100%;
+    object-fit: cover;
+    background: black;
+  }
 }
 
 .chat-window {
